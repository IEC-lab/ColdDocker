# namespace: coldworld

# coldbridge Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coldbridge
  namespace: coldworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coldbridge
  template:
    metadata:
      labels:
        app: coldbridge
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldbridge
        image: coldbridge:201216.01
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8888
          name: rtspservice
      
---

# coldbridge Service
apiVersion: v1
kind: Service
metadata:
  name: coldbridge-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldbridge
  ports:
  - protocol: TCP
    targetPort: rtspservice
    port: 8888
    nodePort: 8888

---

# coldmountain Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coldmountain
  namespace: coldworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coldmountain
  template:
    metadata:
      labels:
        app: coldmountain
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldmountain
        image: coldmountain:201016.03
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8899
          name: apiservice

---

# coldmountain Service
apiVersion: v1
kind: Service
metadata:
  name: coldmountain-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldmountain
  ports:
  - protocol: TCP
    targetPort: apiservice
    port: 8899
    nodePort: 8899

---

# coldcloud Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coldcloud
  namespace: coldworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coldcloud
  template:
    metadata:
      labels:
        app: coldcloud
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldcloud
        image: coldcloud:201216.01
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: webservice

---

# coldcloud Service
apiVersion: v1
kind: Service
metadata:
  name: coldcloud-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldcloud
  ports:
  - protocol: TCP
    targetPort: webservice
    port: 8089
    nodePort: 8089

---

# coldcloudc8l Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coldcloudc8l
  namespace: coldworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coldcloudc8l
  template:
    metadata:
      labels:
        app: coldcloudc8l
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldcloudc8l
        image: coldcloudc8l:210122
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: webservice

---

# coldcloudc8l Service
apiVersion: v1
kind: Service
metadata:
  name: coldcloudc8l-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldcloudc8l
  ports:
  - protocol: TCP
    targetPort: webservice
    port: 8088
    nodePort: 8088

---

# coldrepo StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: coldrepo
  namespace: coldworld
spec:
  replicas: 1
  serviceName: coldrepo-service
  selector:
    matchLabels:
      app: coldrepo
  template:
    metadata:
      labels:
        app: coldrepo
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloud04
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldrepo
        image: coldrepo
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3306
          name: mysqlservice
        volumeMounts:
        - name: mysqlconf
          mountPath: /var/lib/mysql
      volumes:
        - name: mysqlconf
          hostPath:
            path: /home/ws/ColdDocker/mysql

---

# coldrepo Service
apiVersion: v1
kind: Service
metadata:
  name: coldrepo-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldrepo
  ports:
  - protocol: TCP
    targetPort: mysqlservice
    port: 3306
    nodePort: 3306

---

# coldzk StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: coldzk
  namespace: coldworld
spec:
  replicas: 1
  serviceName: coldzk-service
  selector:
    matchLabels:
      app: coldzk
  template:
    metadata:
      labels:
        app: coldzk
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloud04
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldzk
        image: wurstmeister/zookeeper
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2181
          name: zkservice
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime

---

# coldzk Service
apiVersion: v1
kind: Service
metadata:
  name: coldzk-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldzk
  ports:
  - protocol: TCP
    targetPort: zkservice
    port: 2181
    nodePort: 2181

---

# coldq StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: coldq
  namespace: coldworld
spec:
  replicas: 1
  serviceName: coldq-service
  selector:
    matchLabels:
      app: coldq
  template:
    metadata:
      labels:
        app: coldq
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloud04
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldq
        image: wurstmeister/kafka:2.11-0.11.0.3
        imagePullPolicy: IfNotPresent
        env:
        - name: "KAFKA_BROKER_ID"
          value: "0"
        - name: "KAFKA_ZOOKEEPER_CONNECT"
          value: "coldzk-service.coldworld"
        - name: "KAFKA_ADVERTISED_LISTENERS"
          value: "PLAINTEXT://192.168.1.4:9092"
        - name: "KAFKA_LISTENERS"
          value: "PLAINTEXT://0.0.0.0:9092"
        ports:
        - containerPort: 9092
          name: qservice
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: kafkaconf
          mountPath: /kafka
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: kafkaconf
          hostPath:
            path: /home/ws/ColdDocker/kafka

---

# coldq Service
apiVersion: v1
kind: Service
metadata:
  name: coldq-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldq
  ports:
  - protocol: TCP
    targetPort: qservice
    port: 9092
    nodePort: 9092

---

# coldswfs-master StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: coldswfs-master
  namespace: coldworld
spec:
  replicas: 1
  serviceName: coldswfs-master-service
  selector:
    matchLabels:
      app: coldswfs-master
  template:
    metadata:
      labels:
        app: coldswfs-master
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloud04
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldswfs-master
        image: chrislusf/seaweedfs:210422
        imagePullPolicy: IfNotPresent
        args: ["master", "-mdir /swfs_master"]
        ports:
        - containerPort: 9333
          name: port1
        - containerPort: 19333
          name: port2
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: swconf
          mountPath: /swfs_master
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: swconf
          hostPath:
            path: /home/ws/ColdDocker/swfs_master

---

# coldswfs-master service
apiVersion: v1
kind: Service
metadata:
  name: coldswfs-master-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldswfs-master
  ports:
  - protocol: TCP
    targetPort: port1
    port: 9333
    nodePort: 9333
    name: port1
  - protocol: TCP
    targetPort: port2
    port: 19333
    nodePort: 19333
    name: port2

# ---

# coldswfs-volume StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: coldswfs-volume
  namespace: coldworld
spec:
  replicas: 1
  serviceName: coldswfs-volume-service
  selector:
    matchLabels:
      app: coldswfs-volume
  template:
    metadata:
      labels:
        app: coldswfs-volume
    spec:
      nodeSelector:
        kubernetes.io/hostname: cloud04
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      containers:
      - name: coldswfs-volume
        image: chrislusf/seaweedfs:210422
        imagePullPolicy: IfNotPresent
        args: ["volume", "-mserver=coldswfs-master-service.coldworld:9333", "-port=7777", "-dir swfs_volume"]
        ports:
        - containerPort: 7777
          name: service-port
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: swconf
          mountPath: /swfs_volume
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: swconf
          hostPath:
            path: /home/ws/ColdDocker/swfs_volume

---

# coldswfs-volume service
apiVersion: v1
kind: Service
metadata:
  name: coldswfs-volume-service
  namespace: coldworld
spec:
  type: NodePort
  selector:
    app: coldswfs-volume
  ports:
  - protocol: TCP
    targetPort: service-port
    port: 7777
    nodePort: 7777